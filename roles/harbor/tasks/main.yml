---
- name: 创建harbor证书目录
  file: dest={{ k8s_work_dir }}/ssl/harbor state=directory

- name: 分发自签名证书
  copy: src=harbor_cert/{{ item }} dest={{ k8s_work_dir }}/ssl/harbor/
  with_items:
  - ca.pem
  - harbor.pem
  - harbor-key.pem
  
- name: 创建docker证书目录
  file: dest=/etc/docker/certs.d/{{ HARBOR_REGISTRY }} state=directory

- name: 分发docker-harbor证书
  copy: src=harbor_cert/{{ item }} dest=/etc/docker/certs.d/{{ HARBOR_REGISTRY }}/ca.crt
  with_items:
    - ca.pem
#\-------------------------------------------------------------------------------------------------\
#\-------------------------------------------------------------------------------------------------\
- name: 创建 {{ HARBOR_PATH }} 目录
  file:
    path: "{{ HARBOR_PATH }}"
    state: directory
    mode: 0755

# 注册变量 result，如果 {{ HARBOR_PATH }} 目录下存在 registry 目录说明已经安装过 harbor，则不进行安装
- name: 注册变量 result
  command: ls {{ HARBOR_PATH }}
  register: result
- debug: var=result.stdout_lines

- block:
#  - name: 生成 harbor 随机密码
#    shell: < /dev/urandom tr -dc 0-9A-Za-z-_ | head -c 16
#    register: harbor_password_gen
#  - debug: var="harbor_password_gen.stdout"
  
#  - name: 生成 DB 随机密码
#    shell: < /dev/urandom tr -dc 0-9A-Za-z-_ | head -c 16
#    register: db_password_gen
#  - debug: var="db_password_gen.stdout"

  - name: 下发 harbor 离线安装包
    copy:
      src: "{{ software_dir }}/harbor-offline-installer-aarch64-{{ HARBOR_VER }}.tgz"
      dest: "{{ HARBOR_PATH }}/harbor-offline-installer-aarch64-{{ HARBOR_VER }}.tgz"

  - name: 解压 harbor 离线安装包
    shell: "cd {{ HARBOR_PATH }} && tar zxf harbor-offline-installer-aarch64-{{ HARBOR_VER }}.tgz"

#harbor安装脚本会导入镜像
#  - name: 导入 harbor 所需 docker images
#    shell: "docker load -i {{ HARBOR_PATH }}/harbor/harbor.{{ HARBOR_VER }}.tar.gz"

  - name: 准备 harbor 配置文件
    template: src=harbor-{{ HARBOR_VER_MAIN }}.yml.j2 dest={{ HARBOR_PATH }}/harbor/harbor.yml

  - set_fact: HARBOR_INST_OPS="{{ HARBOR_INST_OPS }} --with-trivy"
    when: "HARBOR_WITH_TRIVY|bool"
  - debug: var="HARBOR_INST_OPS"

  - name: 安装 harbor
    shell: "cd {{ HARBOR_PATH }}/harbor && \
            ./install.sh {{ HARBOR_INST_OPS }} >> {{ tmp_dir }}/harbor-`date +'%Y%m%d%H%M%S'`.log 2>&1"
  when: '"registry" not in result.stdout'

- name: 检测 harbor 端口是否正常
  wait_for:
    host: "{{ inventory_hostname }}"
    port: "{{ HARBOR_TLS_PORT }}"
    timeout: 60
  run_once: true
