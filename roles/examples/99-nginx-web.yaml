---
#如果需要给类型资源如 Deployment，StatefulSet 绑定子网，需要将 ovn.kubernetes.io/logical_switch Annotation 设置在 spec.template.metadata.annotations。
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-web2
spec:
  selector:
    matchLabels:
      app: nginx
  replicas: 1 # 指定Pod副本数
  template:
    metadata:
      labels:
        app: nginx
#地址池的多网卡Pod
#    annotations:
#      k8s.v1.cni.cncf.io/networks: default/macvlan
#      ovn.kubernetes.io/ip_pool: 10.16.0.15,10.16.0.16,10.16.0.17
#      macvlan.default.kubernetes.io/ip_pool: 172.17.0.200,172.17.0.201,172.17.0.202
#地址随机分配的多网卡Pod
#    annotations:
#      k8s.v1.cni.cncf.io/networks: default/macvlan
#地址固定的多网卡Pod
#    annotations:
#      k8s.v1.cni.cncf.io/networks: default/macvlan
#      ovn.kubernetes.io/ip_address: 10.16.0.15
#      ovn.kubernetes.io/mac_address: 00:00:00:53:6B:B6
#      macvlan.default.kubernetes.io/ip_address: 172.17.0.100
#      macvlan.default.kubernetes.io/mac_address: 00:00:00:53:6B:BB
#默认情况下 Pod 会从 Namespace 所属的子网内分配 IP 地址，如果 Namespace 下某个 Workload 需要特殊指定一个子网，可以通过设置 Pod 的 Annotation ovn.kubernetes.io/logical_switch 来实现
#    annotations:
#      ovn.kubernetes.io/logical_switch: subnet1
#将 sriov 设置为默认网卡
#    annotations:
#        v1.multus-cni.io/default-network: sriov-net2
#网卡重命名
#    annotations:
#        k8s.v1.cni.cncf.io/networks: '[
#            { "name" : "sriov-net2",
#              "interface": "sriovnet2" }
#        ]'
    spec:
      containers:
      - name: nginx
        image: docker.io/library/nginx:latest
        imagePullPolicy: IfNotPresent
        ports:
         - containerPort: 80
      #nodeSelector:
        #model: c5000
        #kubernetes.io/hostname: k8s-master1  

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: nginx
  name: nginx-service
  namespace: default
spec:
  externalTrafficPolicy: Cluster
  internalTrafficPolicy: Cluster
  ipFamilies:
  - IPv4
  ipFamilyPolicy: SingleStack
  ports:
  - nodePort: 31218
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    app: nginx
  sessionAffinity: None
  type: NodePort
status:
  loadBalancer: {}

