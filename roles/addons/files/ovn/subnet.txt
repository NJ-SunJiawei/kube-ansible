创建自定义子网¶
这里我们介绍创建一个子网，并将其和某个 Namespace 做关联的基本操作，更多高级配置请参考后续内容。

创建子网¶

cat <<EOF | kubectl create -f -
apiVersion: kubeovn.io/v1
kind: Subnet
metadata:
  name: subnet1
spec:
  protocol: IPv4
  cidrBlock: 10.66.0.0/16
  excludeIps:
  - 10.66.0.1..10.66.0.10
  - 10.66.0.101..10.66.0.151
  gateway: 10.66.0.1
  gatewayType: distributed
  natOutgoing: true
  namespaces:
  - ns1
  - ns2
EOF
cidrBlock: 子网 CIDR 范围，同一个 VPC 下的不同 Subnet CIDR 不能重叠。
excludeIps: 保留地址列表，容器网络将不会自动分配列表内的地址，可用做固定 IP 地址分配段，也可在 Underlay 模式下避免和物理网络中已有设备冲突。
gateway：该子网网关地址，Overlay 模式下 Kube-OVN 会自动分配对应的逻辑网关，Underlay 模式下该地址需为底层物理网关地址。
gatewayType: 网关类型，distributed：指定网关类型为分布式网关，即每个节点都可以作为网关，分担出站流量的负载。
namespaces: 绑定该子网的 Namespace 列表，绑定后 Namespace 下的 Pod 将会从当前子网分配地址。

单个 Pod 固定 IP 和 Mac¶
可以在创建 Pod 时通过 annotation 来指定 Pod 运行时所需的 IP/Mac, kube-ovn-controller 运行时将会跳过地址随机分配阶段，经过冲突检测后直接使用指定地址，如下所示：


apiVersion: v1
kind: Pod
metadata:
  name: static-ip
  annotations:
    ovn.kubernetes.io/ip_address: 10.16.0.15   // 双栈地址使用逗号分隔 10.16.0.15,fd00:10:16::15
    ovn.kubernetes.io/mac_address: 00:00:00:53:6B:B6
spec:
  containers:
  - name: static-ip
    image: docker.io/library/nginx:alpine
在使用 annotation 定义单个 Pod IP/Mac 时需要注意以下几点：

所使用的 IP/Mac 不能和已有的 IP/Mac 冲突。
IP 必须在所属子网的 CIDR 内。
可以只指定 IP 或 Mac，只指定一个时，另一个会随机分配。
Workload 通用 IP Pool 固定地址¶
Kube-OVN 支持通过 annotation ovn.kubernetes.io/ip_pool 给 Workload（Deployment/StatefulSet/DaemonSet/Job/CronJob）设置固定 IP。 kube-ovn-controllerr 会自动选择 ovn.kubernetes.io/ip_pool 中指定的 IP 并进行冲突检测。

IP Pool 的 Annotation 需要加在 template 内的 annotation 字段，除了 Kubernetes 内置的 Workload 类型， 其他用户自定义的 Workload 也可以使用同样的方式进行固定地址分配。

Deployment 固定 IP 示例¶

apiVersion: apps/v1
kind: Deployment
metadata:
  name: ippool
  labels:
    app: ippool
spec:
  replicas: 2
  selector:
    matchLabels:
      app: ippool
  template:
    metadata:
      labels:
        app: ippool
      annotations:
        ovn.kubernetes.io/ip_pool: 10.16.0.15,10.16.0.16,10.16.0.17 // 双栈地址使用分号进行分隔 10.16.0.15,fd00:10:16::000E;10.16.0.16,fd00:10:16::000F;10.16.0.17,fd00:10:16::0010
    spec:
      containers:
      - name: ippool
        image: docker.io/library/nginx:alpine
对 Workload 使用固定 IP 需要注意以下几点：

ovn.kubernetes.io/ip_pool 中的 IP 应该属于所在子网的 CIDR 内。
ovn.kubernetes.io/ip_pool 中的 IP 不能和已使用的 IP 冲突。
当 ovn.kubernetes.io/ip_pool 中的 IP 数量小于 replicas 数量时，多出的 Pod 将无法创建。你需要根据 Workload 的更新策略以及扩容规划调整 ovn.kubernetes.io/ip_pool 中 IP 的数量。
StatefulSet 固定地址¶
StatefulSet 和其他 Workload 相同可以使用 ovn.kubernetes.io/ip_pool 来指定 Pod 使用的 IP。

由于 StatefulSet 多用于有状态服务，对网络标示的固定有更高的要求，Kube-OVN 做了特殊的强化：

Pod 会按顺序分配 ovn.kubernetes.io/ip_pool 中的 IP。例如 StatefulSet 的名字为 web，则 web-0 会使用 ovn.kubernetes.io/ip_pool 中的第一个 IP， web-1 会使用第二个 IP，以此类推。
StatefulSet Pod 在更新或删除的过程中 OVN 中的 logical_switch_port 不会删除，新生成的 Pod 直接复用旧的 interface 信息。因此 Pod 可以复用 IP/Mac 及其他网络信息，达到和 StatefulSet Volume 类似的状态保留功能。
基于 2 的能力，对于没有 ovn.kubernetes.io/ip_pool 注解的 StatefulSet，Pod 第一次生成时会随机分配 IP/Mac，之后在整个 StatefulSet 的生命周期内，网络信息都会保持固定。
StatefulSet 示例¶

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: web
spec:
  serviceName: "nginx"
  replicas: 2
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: docker.io/library/nginx:alpine
        ports:
        - containerPort: 80
          name: web
可以尝试删除 StatefulSet 下 Pod 观察 Pod IP 变化信息。